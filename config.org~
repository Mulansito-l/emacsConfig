AUTHOR: Diego Casta√±eda Covarrubias

* Package Manager
** Straight.el

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

#+RESULTS:
: t

**  Straight Use Package

#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

* Fonts
** Font face
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "Mononoki Nerd Font"
  :height 160
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "Mononoki Nerd Font"
  :height 160
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)

;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
(add-to-list 'default-frame-alist '(font . "Mononoki Nerd Font-16"))
;; changes certain keywords to symbols, such as lamda!
(setq global-prettify-symbols-mode t)
#+end_src

** Font zooming
#+begin_src emacs-lisp
;; zoom in/out like we do everywhere else.
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* Evil Mode

#+begin_src emacs-lisp
    (use-package evil
    :straight t
      :init      ;; tweak evil's configuration before loading it
      (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
      (setq evil-want-keybinding nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (evil-mode))
    (use-package evil-collection
      :after evil
      :straight t
      :config
      (setq evil-collection-mode-list '(dashboard dired ibuffer))
      (evil-collection-init))
    (use-package evil-tutor
  :straight t)
#+end_src

* General Keybinds
#+begin_src emacs-lisp
  (use-package general
    :straight t
    :config
    (general-evil-setup t))
#+end_src

* Startup Perfomance
** Garbage Collection
#+begin_src emacs-lisp
  ;; Using garbage magic hack.
   (use-package gcmh
:straight t
  :config
     (gcmh-mode 1))
  ;; Setting garbage collection threshold
  (setq gc-cons-threshold 402653184
	gc-cons-percentage 0.6)

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))

  ;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

** Native Compile

#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src

* All the icons
#+begin_src emacs-lisp
(use-package all-the-icons :straight t)
#+end_src

* Buffers
#+begin_src emacs-lisp
(nvmap :prefix "SPC"
       "b b"   '(ibuffer :which-key "Ibuffer")
       "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
       "b k"   '(kill-current-buffer :which-key "Kill current buffer")
       "b n"   '(next-buffer :which-key "Next buffer")
       "b p"   '(previous-buffer :which-key "Previous buffer")
       "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
       "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src

* Dashboard
** Dashboard config
#+begin_src emacs-lisp
  (use-package dashboard
:straight t
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "~/.config/emacs/dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
			    (agenda . 5 )
			    (bookmarks . 3)
			    (projects . 3)
			    (registers . 3)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
				(bookmarks . "book"))))
#+end_src

** Dashboard in Client
#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

** Dired
#+begin_src emacs-lisp
(use-package all-the-icons-dired :straight t)
(use-package dired-open :straight t)
(use-package peep-dired :straight t)

(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
               "p v" '(dired :which-key "Open dired")
               "p c" '(dired-jump :which-key "Dired jump to current")
               "p p" '(peep-dired :which-key "Peep-dired"))

(with-eval-after-load 'dired
  ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

* Files
** File keybinds
#+begin_src emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "."     '(find-file :which-key "Find file")
       "f f"   '(find-file :which-key "Find file")
       "f r"   '(counsel-recentf :which-key "Recent files")
       "f s"   '(save-buffer :which-key "Save file")
       "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
       "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
       "f C"   '(copy-file :which-key "Copy file")
       "f D"   '(delete-file :which-key "Delete file")
       "f R"   '(rename-file :which-key "Rename file")
       "f S"   '(write-file :which-key "Save file as...")
       "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** File utilities
#+begin_src emacs-lisp
  (use-package recentf
:straight t
  :config
    (recentf-mode))
  (use-package sudo-edit :straight t) ;; Utilities for opening files with sudo
#+end_src

* General Keybindings
#+begin_src emacs-lisp
(nvmap :keymaps 'override :prefix "SPC"
       "SPC"   '(counsel-M-x :which-key "M-x")
       "c c"   '(compile :which-key "Compile")
       "c C"   '(recompile :which-key "Recompile")
       "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
       "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines"))
(nvmap :keymaps 'override :prefix "SPC"
       "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
       "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
       "m ."   '(counsel-org-goto :which-key "Counsel org goto")
       "m e"   '(org-export-dispatch :which-key "Org export dispatch")
       "m f"   '(org-footnote-new :which-key "Org footnote new")
       "m h"   '(org-toggle-heading :which-key "Org toggle heading")
       "m i"   '(org-toggle-item :which-key "Org toggle item")
       "m n"   '(org-store-link :which-key "Org store link")
       "m o"   '(org-set-property :which-key "Org set property")
       "m t"   '(org-todo :which-key "Org todo")
       "m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
       "m B"   '(org-babel-tangle :which-key "Org babel tangle")
       "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
       "m T"   '(org-todo-list :which-key "Org todo list")
       "o a"   '(org-agenda :which-key "Org agenda")
       )
#+end_src

* GUI Tweaks
** Disable menus
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Line numbers
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** Doom modeline
#+begin_src emacs-lisp
(use-package doom-modeline :straight t)
(doom-modeline-mode 1)
#+end_src

* IVY (Counsel / Swiper)

** Ivy basic setup
#+begin_src emacs-lisp
  (use-package counsel
    :straight t
    :after ivy
    :config (counsel-mode))
  (use-package ivy
    :straight t
    :defer 0.1
    :diminish
    :bind
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))
  (use-package ivy-rich
    :straight t
    :after ivy
    :custom
    (ivy-virtual-abbreviate 'full
			    ivy-rich-switch-buffer-align-virtual-buffer t
			    ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
				 'ivy-rich-switch-buffer-transformer)
    (ivy-rich-mode 1)) ;; this gets us descriptions in M-x.
  (use-package swiper
    :straight t
    :after ivy
    :bind (("C-s" . swiper)
	   ("C-r" . swiper)))
#+end_src

** Great M-x
#+begin_src emacs-lisp
  (setq ivy-initial-inputs-alist nil)
  (use-package smex :straight t)
  (smex-initialize)
#+end_src

** Ivy posframe
#+begin_src emacs-lisp
  (use-package ivy-posframe
    :straight t
    :init
    (setq ivy-posframe-display-functions-alist
	  '((swiper                     . ivy-posframe-display-at-point)
	    (complete-symbol            . ivy-posframe-display-at-point)
	    (counsel-M-x                . ivy-display-function-fallback)
	    (counsel-esh-history        . ivy-posframe-display-at-window-center)
	    (counsel-describe-function  . ivy-display-function-fallback)
	    (counsel-describe-variable  . ivy-display-function-fallback)
	    (counsel-find-file          . ivy-display-function-fallback)
	    (counsel-recentf            . ivy-display-function-fallback)
	    (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
	    (dmenu                      . ivy-posframe-display-at-frame-top-center)
	    (nil                        . ivy-posframe-display))
	  ivy-posframe-height-alist
	  '((swiper . 20)
	    (dmenu . 20)
	    (t . 10)))
    :config
    (ivy-posframe-mode 1)) ; 1 enables posframe-mode, 0 disables it.
#+end_src

* Language Support
#+begin_src emacs-lisp
(use-package haskell-mode :straight t)
(use-package lua-mode :straight t)
(use-package markdown-mode :straight t)

(use-package projectile :straight t)
(use-package flycheck :straight t)
(use-package yasnippet :straight t :config (yas-global-mode))
(use-package lsp-mode :straight t :hook ((lsp-mode . lsp-enable-which-key-integration)))
(use-package hydra :straight t)
(use-package company :straight t)
(use-package lsp-ui :straight t)
(use-package lsp-java :straight t :config (add-hook 'java-mode-hook 'lsp))
(use-package dap-mode :straight t :after lsp-mode :config (dap-auto-configure-mode))
(use-package helm-lsp :straight t)
(use-package helm :straight t
  :config (helm-mode))
(use-package lsp-treemacs :straight t)
#+end_src

* Neotree
#+begin_src emacs-lisp
  ;; Function for setting a fixed width for neotree.
  ;; Defaults to 25 but I make it a bit longer (35) in the 'use-package neotree'.
  (defcustom neo-window-width 25
    "*Specifies the width of the NeoTree window."
    :type 'integer
    :group 'neotree)

  (use-package neotree
    :straight t
    :config
    (setq neo-smart-open t
	  neo-window-width 30
	  neo-theme (if (display-graphic-p) 'icons 'arrow)
	  ;;neo-window-fixed-size nil
	  inhibit-compacting-font-caches t
	  projectile-switch-project-action 'neotree-projectile-action) 
    ;; truncate long file names in neotree
    (add-hook 'neo-after-create-hook
	      #'(lambda (_)
		  (with-current-buffer (get-buffer neo-buffer-name)
		    (setq truncate-lines t)
		    (setq word-wrap nil)
		    (make-local-variable 'auto-hscroll-mode)
		    (setq auto-hscroll-mode nil)))))

  ;; show hidden files
  (setq-default neo-show-hidden-files t)

  (nvmap :prefix "SPC"
    "t n"   '(neotree-toggle :which-key "Toggle neotree file viewer")
    "d n"   '(neotree-dir :which-key "Open directory in neotree"))
#+end_src

* ORG Mode

** Some defines
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-directory "~/.config/emacs/Org/"
      org-agenda-files '("~/.config/emacs/Org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " ‚ñº "
      org-log-done 'time
      org-journal-dir "~/.config/emacs/Org/journal/"
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org"
      org-hide-emphasis-markers t)
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)
#+end_src

** ORG Bullets
#+begin_src emacs-lisp
(use-package org-bullets :straight t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Org Todo Keywords
#+begin_src emacs-lisp
(setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
        '((sequence
           "TODO(t)"           ; A task that is ready to be tackled
           "BLOG(b)"           ; Blog writing assignments
           "GYM(g)"            ; Things to accomplish at the gym
           "PROJ(p)"           ; A project that contains other tasks
           "VIDEO(v)"          ; Video assignments
           "WAIT(w)"           ; Something is holding up this task
           "|"                 ; The pipe necessary to separate "active" states and "inactive" states
           "DONE(d)"           ; Task has been completed
           "CANCELLED(c)" )))  ; Task has been cancelled
#+end_src

** Org Tempo
#+begin_src emacs-lisp
(use-package org-tempo
  :ensure nil) ;; tell use-package not to try to install org-tempo since it's already there.
#+end_src
** Source Code Block Syntax Highlighting
#+begin_src emacs-lisp
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)
#+end_src

** Automatic TOC
#+begin_src emacs-lisp
(use-package toc-org
:straight t
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** M-RET no blanks
#+begin_src emacs-lisp
(setq org-blank-before-new-entry (quote ((heading . nil)
                                         (plain-list-item . nil))))
#+end_src

* Perspective
#+begin_src emacs-lisp
(use-package perspective
:straight t
:bind
  ("C-x C-b" . persp-list-buffers)   ; or use a nicer switcher, see below
  :config
  (persp-mode))
#+end_src

* Projectile
#+begin_src emacs-lisp

(use-package projectile
:straight t
:config
  (projectile-global-mode 1))
#+end_src

* Scrolling
#+begin_src emacs-lisp
(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
(setq mouse-wheel-progressive-speed f) ;; accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+end_src

* Eshell

#+begin_src emacs-lisp
(nvmap :prefix "SPC"
       "e h"   '(counsel-esh-history :which-key "Eshell history")
       "e s"   '(eshell :which-key "Eshell"))
(use-package eshell-syntax-highlighting
:straight t
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

* Vterm
#+begin_src emacs-lisp
(use-package vterm :straight t)
(setq shell-file-name "/bin/zsh"
      vterm-max-scrollback 5000)
#+end_src

* Splits and Windows
#+begin_src emacs-lisp
(winner-mode 1)
(nvmap :prefix "SPC"
       ;; Window splits
       "w c"   '(evil-window-delete :which-key "Close window")
       "w n"   '(evil-window-new :which-key "New window")
       "w s"   '(evil-window-split :which-key "Horizontal split window")
       "w v"   '(evil-window-vsplit :which-key "Vertical split window")
       ;; Window motions
       "w h"   '(evil-window-left :which-key "Window left")
       "w j"   '(evil-window-down :which-key "Window down")
       "w k"   '(evil-window-up :which-key "Window up")
       "w l"   '(evil-window-right :which-key "Window right")
       "w w"   '(evil-window-next :which-key "Goto next window")
       ;; winner mode
       "w <left>"  '(winner-undo :which-key "Winner undo")
       "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src

* Theme
#+begin_src emacs-lisp
(use-package catppuccin-theme :straight t)
(load-theme 'catppuccin :no-confirm)
(setq catppuccin-flavor 'macchiato) ;; or 'latte, 'macchiato, or 'mocha
(catppuccin-reload)
#+end_src

* Which-key
#+begin_src emacs-lisp
(use-package which-key
:straight t
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " ‚Üí " ))
(which-key-mode)
#+end_src

* Runtime Performance
#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
